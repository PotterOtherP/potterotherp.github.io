{"version":3,"sources":["SampleRow.js","Table.js","Form.js","App.js","index.js"],"names":["all_plant_tests","all_waste_tests","all_solution_tests","all_media_tests","TestEditForm","props","id","style","display","testArray","map","test","type","name","value","defaultChecked","assignedTests","includes","onChange","event","assignTest","target","checked","htmlFor","SampleRow","sampleId","code","setSampleCode","index","dropDown","extraTests","join","onClick","formId","val","document","getElementById","getAttribute","setAttribute","toggleTestEditForm","src","alt","tests","comment","addComment","insertSample","removeSample","LabHeader","reportData","reportType","reportNumber","firstLabId","numSamples","saveReport","TableHeader","TableBody","rows","sampleGrid","row","sampleType","Table","className","Form","initialState","sampleCode","state","handleChange","setState","handleSampleTypeChange","setFormSampleType","updateSampleCode","selectNumSamples","select","selectReportNumber","selectFirstId","submitForm","preventDefault","handleSubmit","this","onFocus","min","max","required","Component","plant_codes","waste_codes","solution_codes","media_codes","default_plant_tests","default_waste_liquid_tests","default_waste_solid_tests","default_solution_tests","default_media_tests","extra_tests","copyArray","arr","result","item","push","getTests","result_array","isSolidWaste","hasOwnProperty","concat","result_copy","getExtraTests","App","formSampleType","formSampleCode","key","newComment","samples","console","log","filter","sort","adjustGridIdNumbers","refreshSampleIDs","first","i","clearGrid","getDropDown","copy","Object","create","assign","splice","length","reportInfo","Number","parseInt","table","newCode","ReactDOM","render","StrictMode"],"mappings":"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ACA,cACA,QACA,WACA,OACA,SACA,WACA,YACA,UACA,MACA,SACA,UACA,gBACA,YACA,WACA,OACA,UACA,SACA,UACA,SACA,aACA,SACA,aACA,YAIEC,EAAc,CAEhB,4BACA,6BACA,8BACA,4BACA,8BACA,4BACA,4BACA,oBACA,qBACA,qBACA,qBACA,wCACA,yCACA,yCACA,yCACA,yCACA,+BACA,8BACA,uBACA,qBACA,sBACA,gCACA,iCACA,iCACA,mCACA,iCACA,iCACA,mCACA,iCACA,gCACA,iCACA,qBACA,yCACA,2BACA,0CACA,2CACA,0BACA,mCACA,oCACA,yBACA,yBACA,mCACA,oCACA,iBACA,iBACA,gBACA,4BACA,yBACA,6BACA,yBACA,yBACA,gDAIEC,EAAiB,CAEnB,oBACA,kBACA,yBACA,kCACA,oBACA,6BACA,qBACA,mBACA,iCACA,iCACA,0BACA,+BACA,oBACA,mBACA,mBACA,6BACA,0BACA,2BACA,0BACA,yBACA,2BACA,0BACA,uBACA,wBACA,0BACA,2BACA,+BACA,qCACA,uCACA,8BAIEC,EAAc,CAEhB,wBACA,qBACA,qBACA,4BACA,eASEC,EAAsB,CAAC,MAAO,KAC9BC,EAA6B,CAAC,MAAO,KAAM,OAC3CC,EAA4B,CAAC,KAAM,MAAO,KAC1CC,EAAyB,CAAC,MAAO,KAAM,MAAO,UAAW,MACzDC,EAAsB,CAAC,KAAM,MAAO,MAEpCC,EAAc,CAEhB,QAAW,CAAC,MACZ,SAAY,CAAC,MACb,mBAAoB,CAAC,MACrB,YAAe,CAAC,MAChB,QAAW,CAAC,MACZ,OAAU,CAAC,MACX,SAAY,CAAC,MACb,KAAQ,CAAC,MACT,SAAY,CAAC,MACb,WAAc,CAAC,MACf,QAAW,CAAC,MACZ,OAAU,CAAC,MAEX,WAAc,CAAC,OACf,OAAU,CAAC,OAEX,gCAAiC,CAAC,IAAK,KAAM,MAC7C,iCAAkC,CAAC,IAAK,KAAM,MAC9C,iCAAkC,CAAC,IAAK,KAAM,MAC9C,mCAAoC,CAAC,IAAK,KAAM,MAChD,iCAAkC,CAAC,IAAK,KAAM,MAC9C,iCAAkC,CAAC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","file":"static/js/main.1730aa05.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"DW\", \"ICP\", \"Mo\", \"N\", \"NO3\"];\r\nconst all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM - All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\nconst all_solution_tests = [ \"CBC\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\nconst all_media_tests = [ \"Bulk Density\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n\r\nconst TestEditForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form id={props.id + \"testEditForm\"} style={{display: \"none\",}} >\r\n        {\r\n\r\n            props.testArray.map( (test) => {\r\n                return(<div key={test}>\r\n                        <input type=\"checkbox\" id={props.id + test} name={test} value={test}\r\n                        defaultChecked={props.assignedTests.includes(test)? true: false}\r\n                        onChange={(event) => props.assignTest(props.id, test, event.target.checked)} />\r\n                        <label htmlFor={props.id + test}>{test}</label>\r\n                       </div>);\r\n            })\r\n        }\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nconst getTestArray = (type) => {\r\n\r\n    if (type === \"Plant\") return all_plant_tests;\r\n    if (type === \"Waste\") return all_waste_tests;\r\n    if (type === \"Solution\") return all_solution_tests;\r\n    if (type === \"Media\") return all_media_tests;\r\n}\r\n\r\nconst toggleTestEditForm = (id) =>\r\n{\r\n    const formId = id + \"testEditForm\";\r\n\r\n    const form = document.getElementById(formId);\r\n    let val = \"display: block;\";\r\n\r\n    if (form.getAttribute(\"style\") === (\"display: block;\"))\r\n        val = \"display: none;\";\r\n\r\n    document.getElementById(formId).setAttribute(\"style\", val);\r\n}\r\n\r\nconst SampleRow = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.sampleId}</td>\r\n            <td>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\"  value={props.code} onChange={(event) => props.setSampleCode(props.index, event.target.value)} >\r\n                            {props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n            </td>\r\n            <td>{props.extraTests.join(\", \")}\r\n                <button id=\"testEdit\" onClick={() => toggleTestEditForm(props.sampleId)} >\r\n                <img src=\"https://s2.svgbox.net/materialui.svg?ic=edit&color=fff\" alt=\"\"/>\r\n                </button>\r\n                <TestEditForm id={props.sampleId} testArray={getTestArray(props.type)} assignedTests={props.tests} assignTest={props.assignTest}/>\r\n\r\n            </td>\r\n\r\n            <td>\r\n                <input type=\"text\" value={props.comment} onChange={(event) => props.addComment(props.index, event.target.value)} />\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.insertSample(props.index)}>+</button>\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.removeSample(props.index)}>X</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SampleRow;","import React from 'react';\r\nimport SampleRow from './SampleRow';\r\n\r\n\r\n\r\nconst LabHeader = (props) => {\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Report Type: {props.reportData.reportType} </th>\r\n                <th>Report {props.reportData.reportNumber} </th>\r\n                <th>Samples {props.reportData.firstLabId} - {props.reportData.firstLabId + props.reportData.numSamples - 1}</th>\r\n                <th><button id=\"saveButton\" onClick={() => props.saveReport()}>Save Report</button></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Lab ID</th>\r\n                <th>Crop/Code</th>\r\n                <th>Extra Tests</th>\r\n                <th>Comment</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\n\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.reportData.sampleGrid.map((row, index) => {\r\n        return (\r\n            <SampleRow\r\n            addComment={props.addComment}\r\n            assignTest={props.assignTest}\r\n            code={row.code}\r\n            comment={row.comment}\r\n            dropDown={props.dropDown}\r\n            extraTests={row.extraTests}\r\n            index={index}\r\n            insertSample={props.insertSample}\r\n            key={index}\r\n            sampleId={row.sampleId}\r\n            removeSample={props.removeSample}\r\n            setSampleCode={props.setSampleCode}\r\n            tests={row.tests}\r\n            type={props.reportData.sampleType}\r\n            />\r\n           \r\n        );\r\n    });\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nconst Table = (props) => {\r\n\r\n    // const {reportData, removeSample} = props;\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table pwsm-table\">\r\n            <LabHeader reportData={props.reportData} saveReport={props.saveReport} />\r\n            <TableHeader />\r\n            <TableBody\r\n                addComment={props.addComment}\r\n                assignTest={props.assignTest}\r\n                dropDown={props.dropDown}\r\n                insertSample={props.insertSample}\r\n                removeSample={props.removeSample}\r\n                reportData={props.reportData}\r\n                setSampleCode={props.setSampleCode}\r\n                />\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n    initialState = {\r\n\r\n        sampleType: 'Plant',\r\n        reportType: 'Predictive',\r\n        reportNumber: 101,\r\n        firstLabId: 1001,\r\n        numSamples: 1,\r\n        sampleCode: this.props.dropDown[0],\r\n\r\n    };\r\n\r\n    state = this.initialState;\r\n\r\n    handleChange = (event) => {\r\n\r\n        this.setState(state => {\r\n            return { [event.target.name]: event.target.value };\r\n        });\r\n\r\n    }\r\n\r\n    handleSampleTypeChange = (event) => {\r\n\r\n        this.setState(state => {\r\n            return {sampleType: event.target.value};\r\n        })\r\n        this.props.setFormSampleType(event.target.value);\r\n        this.updateSampleCode();\r\n    }\r\n\r\n    updateSampleCode = () => {\r\n\r\n        this.setState(state => {\r\n            return { sampleCode: this.props.sampleCode };\r\n        });\r\n    }\r\n\r\n\r\n\r\n    selectNumSamples = () => { document.getElementById(\"numSamples\").select(); }\r\n    selectReportNumber = () => { document.getElementById(\"reportNumber\").select(); }\r\n    selectFirstId = () => { document.getElementById(\"firstLabId\").select(); }\r\n\r\n\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n    }\r\n\r\n    render(props) {\r\n\r\n        return (\r\n            <form>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleSampleTypeChange}>\r\n                    <input type=\"radio\" id=\"plant\" name=\"sampleType\" value=\"Plant\" defaultChecked />\r\n                    <label htmlFor=\"sampleType\">Plant</label>\r\n                    <input type=\"radio\" id=\"waste\" name=\"sampleType\" value=\"Waste\" />\r\n                    <label htmlFor=\"sampleType\">Waste</label>\r\n                    <input type=\"radio\" id=\"solution\" name=\"sampleType\" value=\"Solution\" />\r\n                    <label htmlFor=\"sampleType\">Solution</label>\r\n                    <input type=\"radio\" id=\"media\" name=\"sampleType\" value=\"Media\" />\r\n                    <label htmlFor=\"sampleType\">Media</label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleChange}>\r\n                    <input type=\"radio\" id=\"predictive\" name=\"reportType\" value=\"Predictive\" defaultChecked />\r\n                    <label htmlFor=\"reportType\">Predictive</label>\r\n                    <input type=\"radio\" id=\"diagnostic\" name=\"reportType\" value=\"Diagnostic\" />\r\n                    <label htmlFor=\"reportType\">Diagnostic</label>\r\n                    <input type=\"radio\" id=\"research\" name=\"reportType\" value=\"Research\" />\r\n                    <label htmlFor=\"reportType\">Research</label>\r\n                    <input type=\"radio\" id=\"internal\" name=\"reportType\" value=\"Internal\" />\r\n                    <label htmlFor=\"reportType\">Internal</label>\r\n                    <input type=\"radio\" id=\"out-of-state\" name=\"reportType\" value=\"Out of State\" />\r\n                    <label htmlFor=\"reportType\">Out of State</label>\r\n                </fieldset>\r\n                \r\n                    <div className=\"flex-row\">\r\n                    <table>\r\n                    <thead></thead>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                        <label htmlFor=\"sampleCode\">Crop/Code:</label>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\" onChange={this.handleChange} value={this.state.sampleCode} >\r\n                            {this.props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n                        </td>\r\n\r\n                        <td>\r\n                        <label htmlFor=\"numSamples\">Number of Samples: </label>\r\n                        <input type=\"number\" id=\"numSamples\" name=\"numSamples\" onChange={this.handleChange}\r\n                        onFocus={this.selectNumSamples} value={this.state.numSamples} min=\"1\" max=\"500\" required />\r\n                        </td>\r\n                        \r\n                        <td>\r\n                        <label htmlFor=\"reportNumber\">Report Number: </label>\r\n                        <input type=\"number\" id=\"reportNumber\" name=\"reportNumber\" onChange={this.handleChange}\r\n                        onFocus={this.selectReportNumber} value={this.state.reportNumber} min=\"1\" required/>\r\n                        </td>\r\n\r\n                        <td>\r\n                        <label htmlFor=\"firstLabId\">First Lab ID: </label>\r\n                        <input type=\"number\" id=\"firstLabId\" name=\"firstLabId\" onChange={this.handleChange}\r\n                        onFocus={this.selectFirstId} value={this.state.firstLabId} min=\"1\" required/>\r\n                        </td>\r\n                        </tr>\r\n                        </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n\r\n                <input type=\"submit\" value=\"Create Grid\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nconst plant_codes = [\r\n\r\n    \"Acacia\",\r\n    \"Ailanthus\",\r\n    \"Alfalfa\",\r\n    \"Asparagus\",\r\n    \"Basil\",\r\n    \"Beans\",\r\n    \"Bermudagrass\",\r\n    \"Blackberry\",\r\n    \"Blueberry\",\r\n    \"Broccoli\",\r\n    \"Brussels sprouts\",\r\n    \"Cabbage\",\r\n    \"Cantaloupe\",\r\n    \"Carinata\",\r\n    \"Cauliflower\",\r\n    \"Cedar\",\r\n    \"Collards\",\r\n    \"Corn\",\r\n    \"Cotton\",\r\n    \"Cucumber\",\r\n    \"Dandelion\",\r\n    \"Dogwood\",\r\n    \"Elm\",\r\n    \"Fescue\",\r\n    \"GH Hemp\",\r\n    \"GH Strawberry\",\r\n    \"GH Tomato\",\r\n    \"Honeydew\",\r\n    \"Kale\",\r\n    \"Lettuce\",\r\n    \"Pepper\",\r\n    \"Soybean\",\r\n    \"Squash\",\r\n    \"Strawberry\",\r\n    \"Tomato\",\r\n    \"Watermelon\",\r\n    \"Zucchini\"\r\n\r\n];\r\n\r\nconst waste_codes = [\r\n\r\n    \"ALS - Swine Lagoon Liquid\",\r\n    \"ALF - Swine Farrow to Wean\",\r\n    \"ALP - Poultry Lagoon Liquid\",\r\n    \"ALO - Other Lagoon Liquid\",\r\n    \"ASP - Poultry Lagoon Sludge\",\r\n    \"ASS - Swine Lagoon Sludge\",\r\n    \"ASO - Other Lagoon Sludge\",\r\n    \"LSB - Beef Slurry\",\r\n    \"LSD - Dairy Slurry\",\r\n    \"LSS - Swine Slurry\",\r\n    \"LSO - Other Slurry\",\r\n    \"SSB - Beef Surface Scraped/Stockpiled\",\r\n    \"SSD - Dairy Surface Scraped/Stockpiled\",\r\n    \"SSH - Horse Surface Scraped/Stockpiled\",\r\n    \"SSS - Swine Surface Scraped/Stockpiled\",\r\n    \"SSO - Other Surface Scraped/Stockpiled\",\r\n    \"HBB - Broiler breeder litter\",\r\n    \"HBP - Broiler pullet litter\",\r\n    \"HLB - Broiler litter\",\r\n    \"HLL - Layer litter\",\r\n    \"HLT - Turkey litter\",\r\n    \"FCB - Composted manure - Beef\",\r\n    \"FCD - Composted manure - Dairy\",\r\n    \"FCH - Composted manure - Horse\",\r\n    \"FCP - Composted manure - Poultry\",\r\n    \"FCS - Composted manure - Swine\",\r\n    \"FCO - Composted manure - Other\",\r\n    \"FPM - Compost, poultry mortality\",\r\n    \"FSM - Compost, swine mortality\",\r\n    \"FCW - Compost, plant material\",\r\n    \"FCX - Compost, mixed materials\",\r\n    \"FCV - Vermicompost\",\r\n    \"NCR - Raw plant material/crop residues\",\r\n    \"NBS - Wood waste/sawdust\",\r\n    \"NSF - Food/beverage by-products (solid)\",\r\n    \"NLF - Food/beverage by-products (liquid)\",\r\n    \"GTL - Grease trap water\",\r\n    \"NSA - Animal by-products (solid)\",\r\n    \"NLA - Animal by-products (liquid)\",\r\n    \"IOC - Paper fiber/pulp\",\r\n    \"IOL - Lime by-products\",\r\n    \"NSO - Non-composted solid, other\",\r\n    \"NLO - Non-composted liquid, other\",\r\n    \"CSW - Wood ash\",\r\n    \"CSC - Coal ash\",\r\n    \"CSB - Biochar\",\r\n    \"CSO - Ash, mixed or other\",\r\n    \"BID - Domestic septage\",\r\n    \"BCO - Biosolids, composted\",\r\n    \"BIO - Biosolids, other\",\r\n    \"BIX - Biosolids, mixed\",\r\n    \"BLL - Leachates/effluents or reclaimed water\"\r\n\r\n];\r\n\r\nconst solution_codes = [\r\n\r\n    \"AS - Source Water\",\r\n    \"AP - Pond Water\",\r\n    \"AO - Other Aquaculture\",\r\n    \"FP - Fish Production/Recreation\",\r\n    \"QG - Ground Water\",\r\n    \"QH - Household (nonpotable\",\r\n    \"QS - Surface Water\",\r\n    \"QO - Other Water\",\r\n    \"NS - General Nutrient Solution\",\r\n    \"NT - Tobacco Nutrient Solution\",\r\n    \"NL - Pour-thru Leachate\",\r\n    \"NO - Other Nutrient Solution\",\r\n    \"LC - Cattle Water\",\r\n    \"LH - Horse Water\",\r\n    \"LS - Swine Water\",\r\n    \"LO - Other Livestock Water\",\r\n    \"IW - General Irrigation\",\r\n    \"IO - Overhead Irrigation\",\r\n    \"IT - Trickle Irrigation\",\r\n    \"HT - Hydroponic Tomato\",\r\n    \"HC - Hydroponic Cucumber\",\r\n    \"HL - Hydroponic Lettuce\",\r\n    \"HH - Hydroponic Herb\",\r\n    \"HH - Other Hydroponic\",\r\n    \"SP - Pesticide Solution\",\r\n    \"SH - Hydroponic Nutrient\",\r\n    \"SF - Floriculture Production\",\r\n    \"ST - Tobacco Transplant Production\",\r\n    \"SV - Vegetable Transplant Production\",\r\n    \"SO - Other Solution Source\"\r\n\r\n];\r\n\r\nconst media_codes = [\r\n\r\n    \"GHF - GH Floriculture\",\r\n    \"GHV - GH Vegetable\",\r\n    \"NUR - Nursery Crop\",\r\n    \"TOB - Tobacco Transplants\",\r\n    \"OTH - Other\"\r\n\r\n];\r\n\r\n// const all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"DW\", \"ICP\", \"Mo\", \"N\", \"NO3\"];\r\n// const all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM - All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\n// const all_solution_tests = [ \"CBC\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n// const all_media_tests = [ \"Bulk Density\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n\r\nconst default_plant_tests = [\"ICP\", \"N\"];\r\nconst default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nconst default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nconst default_solution_tests = [\"CBC\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nconst default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\nconst extra_tests = {\r\n\r\n    \"Alfalfa\": [\"Mo\"],\r\n    \"Broccoli\": [\"Mo\"],\r\n    \"Brussels sprouts\": [\"Mo\"],\r\n    \"Cauliflower\": [\"Mo\"],\r\n    \"Cabbage\": [\"Mo\"],\r\n    \"Canola\": [\"Mo\"],\r\n    \"Collards\": [\"Mo\"],\r\n    \"Kale\": [\"Mo\"],\r\n    \"Kohlrabi\": [\"Mo\"],\r\n    \"Poinsettia\": [\"Mo\"],\r\n    \"Spinach\": [\"Mo\"],\r\n    \"Turnip\": [\"Mo\"],\r\n\r\n    \"Strawberry\": [\"NO3\"],\r\n    \"Cotton\": [\"NO3\"],\r\n\r\n    \"FCB - Composted manure - Beef\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCD - Composted manure - Dairy\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCH - Composted manure - Horse\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCP - Composted manure - Poultry\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCS - Composted manure - Swine\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCO - Composted manure - Other\": [\"C\", \"pH\", \"EC\"],\r\n    \"FPM - Compost, poultry mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FSM - Compost, swine mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCW - Compost, plant material\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCX - Compost, mixed materials\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCV - Vermicompost\": [\"C\", \"pH\", \"EC\"],\r\n\r\n\r\n};\r\n\r\nclass App extends Component {\r\n\r\n    initialState = {\r\n\r\n        sampleType: \"Plant\",\r\n        formSampleType: \"Plant\",\r\n        formSampleCode: plant_codes[0],\r\n        reportType: \"Predictive\",\r\n        reportNumber: 1,\r\n        firstLabId: 1,\r\n        numSamples: 1,\r\n        sampleCode: '',\r\n        sampleGrid: []\r\n    };\r\n\r\n\r\n    state = this.initialState;\r\n\r\n    addComment = (key, newComment) => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].comment = newComment; \r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n    }\r\n\r\n    assignTest = (id, test, val) => {\r\n\r\n        console.log(\"assignTest() function: \" + id + \" \" + test + \" \" + val);\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            samples = samples.map( row => {\r\n\r\n                if (row.sampleId === id)\r\n                {\r\n                    if (val === true && !row.tests.includes(test))\r\n                    {\r\n                        console.log(\"Adding \" + test + \" to sample \" + id);\r\n                        row.tests.push(test);\r\n                        row.extraTests.push(test);\r\n                        row.tests.sort();\r\n                        row.extraTests.sort();\r\n\r\n\r\n                    }\r\n\r\n                    else if (val === false && row.tests.includes(test))\r\n                    {\r\n                        console.log(\"Removing \" + test + \" from sample \" + id);\r\n                        row.tests = row.tests.filter(item => item !== test);\r\n                        row.extraTests = row.extraTests.filter(item => item !== test);\r\n\r\n                    }\r\n                }\r\n\r\n                return row;\r\n            })\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n    }\r\n\r\n\r\n    adjustGridIdNumbers = () => {\r\n\r\n        this.refreshSampleIDs();\r\n        this.setState(state => {\r\n\r\n            let first = state.firstLabId;\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let i = 0; i < state.numSamples; ++i)\r\n            {\r\n                samples[i].sampleId = first + i;\r\n            }\r\n\r\n            return { sampleGrid: samples };\r\n        })\r\n\r\n    }\r\n\r\n    clearGrid = () => {\r\n\r\n        this.setState(state => {\r\n\r\n            let noSamples = [];\r\n\r\n            return {sampleGrid: noSamples}\r\n\r\n        });\r\n    }\r\n\r\n    getDropDown = (type) => {\r\n\r\n        switch (type)\r\n        {\r\n            case \"Plant\": return plant_codes;\r\n            case \"Waste\": return waste_codes;\r\n            case \"Solution\": return solution_codes;\r\n            case \"Media\": return media_codes;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    insertSample = (index) => {\r\n\r\n        let samples = this.state.sampleGrid;\r\n        let copy = Object.create(samples[index]);\r\n        copy = Object.assign(copy, samples[index]);\r\n\r\n        copy.tests = copyArray(samples[index].tests);\r\n        copy.extraTests = copyArray(samples[index].extraTests);\r\n\r\n        samples.splice(index, 0, copy);\r\n\r\n        this.setState(state => {\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    refreshSampleIDs = () => {\r\n\r\n        this.setState(state => {\r\n            let newNumSamples = state.sampleGrid.length;\r\n            return { numSamples: newNumSamples };\r\n        });\r\n    }\r\n\r\n    removeSample = (index) => {\r\n\r\n        this.setState(state => {\r\n            const samples = state.sampleGrid.filter((row, i) => i !== index);\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    handleSubmit = (reportInfo) => {\r\n\r\n\r\n        this.setState({\r\n            sampleType: reportInfo.sampleType,\r\n            reportType: reportInfo.reportType,\r\n            reportNumber: Number.parseInt(reportInfo.reportNumber),\r\n            firstLabId: Number.parseInt(reportInfo.firstLabId),\r\n            numSamples: Number.parseInt(reportInfo.numSamples),\r\n            sampleCode: reportInfo.sampleCode });\r\n\r\n        let samples = [];\r\n\r\n        for (let i = 0; i < reportInfo.numSamples; ++i)\r\n        {\r\n            samples.push({\r\n                sampleId: Number.parseInt(reportInfo.firstLabId) + i,\r\n                code: reportInfo.sampleCode,\r\n                tests: getTests(reportInfo.sampleType, reportInfo.sampleCode),\r\n                extraTests: getExtraTests(reportInfo.sampleCode),\r\n                comment: \"\"});\r\n        }\r\n\r\n        this.setState({sampleGrid: samples});\r\n    }\r\n\r\n    saveReport = () => {\r\n\r\n        if (this.state.sampleGrid.length < 1)\r\n        {\r\n            console.log(\"Nothing to save!\");\r\n        }\r\n\r\n        else\r\n        {\r\n            console.table(this.state.sampleGrid);\r\n        }\r\n\r\n    }\r\n\r\n    setSampleCode = (key, newCode) => {\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].code = newCode;\r\n            samples[key].tests = getTests(state.sampleType, newCode);\r\n            samples[key].extraTests = getExtraTests(newCode);\r\n            return { sampleGrid: samples };\r\n        });\r\n    };\r\n\r\n    setFormSampleType = (type) => {\r\n        this.setState({formSampleType: type, formSampleCode: this.getDropDown(type)[0]});\r\n    };\r\n\r\n    render() {\r\n\r\n        // console.clear();\r\n\r\n        return (\r\n            <div className=\"container\">\r\n            <Form\r\n                clearGrid={this.clearGrid}\r\n                dropDown={this.getDropDown(this.state.formSampleType)}\r\n                handleSubmit={this.handleSubmit}\r\n                sampleCode={this.state.formSampleCode}\r\n                setFormSampleType={this.setFormSampleType}\r\n                />\r\n\r\n            <div className=\"container\">\r\n            <Table\r\n                addComment={this.addComment}\r\n                assignTest={this.assignTest}\r\n                dropDown={this.getDropDown(this.state.sampleType)}\r\n                insertSample={this.insertSample}\r\n                removeSample={this.removeSample}\r\n                reportData={this.state}\r\n                saveReport={this.saveReport}\r\n                setSampleCode={this.setSampleCode}\r\n                />\r\n            </div>\r\n\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nfunction copyArray(arr)\r\n{\r\n    let result = [];\r\n\r\n    for (let item of arr)\r\n        result.push(item);\r\n\r\n    return result;\r\n}\r\n\r\n\r\n\r\nfunction isSolidWaste(code)\r\n{\r\n    switch (code)\r\n    {\r\n        case \"SSB - Beef Surface Scraped/Stockpiled\":\r\n        case \"SSD - Dairy Surface Scraped/Stockpiled\":\r\n        case \"SSH - Horse Surface Scraped/Stockpiled\":\r\n        case \"SSS - Swine Surface Scraped/Stockpiled\":\r\n        case \"SSO - Other Surface Scraped/Stockpiled\":\r\n        case \"HBB - Broiler breeder litter\":\r\n        case \"HBP - Broiler pullet litter\":\r\n        case \"HLB - Broiler litter\":\r\n        case \"HLL - Layer litter\":\r\n        case \"HLT - Turkey litter\":\r\n        case \"FCB - Composted manure - Beef\":\r\n        case \"FCD - Composted manure - Dairy\":\r\n        case \"FCH - Composted manure - Horse\":\r\n        case \"FCP - Composted manure - Poultry\":\r\n        case \"FCS - Composted manure - Swine\":\r\n        case \"FCO - Composted manure - Other\":\r\n        case \"FPM - Compost, poultry mortality\":\r\n        case \"FSM - Compost, swine mortality\":\r\n        case \"FCW - Compost, plant material\":\r\n        case \"FCX - Compost, mixed materials\":\r\n        case \"FCV - Vermicompost\":\r\n        case \"NCR - Raw plant material/crop residues\":\r\n        case \"NBS - Wood waste/sawdust\":\r\n        case \"NSF - Food/beverage by-products (solid)\":\r\n        case \"NSA - Animal by-products (solid)\":\r\n        case \"IOC - Paper fiber/pulp\":\r\n        case \"IOL - Lime by-products\":\r\n        case \"NSO - Non-composted solid, other\":\r\n        case \"CSW - Wood ash\":\r\n        case \"CSC - Coal ash\":\r\n        case \"CSB - Biochar\":\r\n        case \"CSO - Ash, mixed or other\":\r\n        case \"BCO - Biosolids, composted\":\r\n        case \"BIO - Biosolids, other\":\r\n        case \"BIX - Biosolids, mixed\":\r\n        {\r\n            return true;\r\n        }\r\n\r\n        default: return false;\r\n    }\r\n}\r\n\r\nfunction getTests(type, code)\r\n{\r\n    let result_array = [];\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\":\r\n            result_array = default_plant_tests;\r\n            break;\r\n        case \"Solution\":\r\n            result_array = default_solution_tests;\r\n            break;\r\n        case \"Media\":\r\n            result_array = default_media_tests;\r\n            break;\r\n        case \"Waste\":\r\n            if (isSolidWaste(code))\r\n                result_array = default_waste_solid_tests;\r\n            else\r\n                result_array = default_waste_liquid_tests;\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n\r\n    if (extra_tests.hasOwnProperty(code))\r\n    {\r\n        result_array = result_array.concat(extra_tests[code]);\r\n    }\r\n\r\n    let result_copy = [];\r\n    for (let item of result_array)\r\n        result_copy.push(item);\r\n\r\n    return result_copy;\r\n}\r\n\r\nfunction getExtraTests(code)\r\n{\r\n    let result = [];\r\n    if (extra_tests.hasOwnProperty(code))\r\n        result = extra_tests[code];\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './pwsm.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}