{"version":3,"sources":["SampleRow.js","Table.js","SavedTable.js","Form.js","App.js","index.js"],"names":["all_plant_tests","all_waste_tests","all_solution_tests","all_media_tests","default_plant_tests","default_waste_liquid_tests","default_waste_solid_tests","default_solution_tests","default_media_tests","TestEditForm","props","id","style","display","testArray","map","test","type","name","value","defaultChecked","assignedTests","includes","onChange","event","assignTest","target","checked","htmlFor","getTestArray","isSolidWaste","code","toggleTestEditForm","document","getElementById","refreshCheckBoxes","formId","val","getAttribute","setAttribute","SampleRow","sampleId","setSampleCode","index","dropDown","tests","filter","item","join","onClick","src","alt","comment","addComment","insertSample","removeSample","LabHeader","reportData","reportType","reportNumber","firstLabId","numSamples","saveReport","clearGrid","TableHeader","TableBody","rows","sampleGrid","row","sampleType","Table","className","SavedTable","records","styledReportNumber","lastLabId","Form","initialState","sampleCode","state","handleChange","setState","handleSampleTypeChange","setFormSampleType","plantMenu","wasteMenu","solutionMenu","mediaMenu","selectNumSamples","select","selectReportNumber","selectFirstId","submitForm","preventDefault","handleSubmit","this","onFocus","min","max","required","Component","plant_codes","waste_codes","solution_codes","media_codes","extra_tests","saved_reports","saved_report_ids","saved_plant_report_numbers","saved_waste_report_numbers","saved_solution_report_numbers","saved_media_report_numbers","saved_plant_lab_ids","saved_waste_lab_ids","saved_solution_lab_ids","saved_media_lab_ids","copyArray","arr","result","push","getTests","result_array","hasOwnProperty","concat","result_copy","App","createDisplay","savedDisplay","formSampleType","formSampleCode","key","newComment","samples","console","log","sort","adjustGridIdNumbers","refreshSampleIDs","first","i","sample","length","shift","deleteSavedReport","displayCreate","displayReports","window","alert","getDropDown","getNextNumbers","report_numbers","lab_numbers","getStyledReportNumber","number","styledNumber","copy","Object","create","assign","splice","reportInfo","Number","parseInt","newId","newReport","newCode","ReactDOM","render","StrictMode"],"mappings":"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AAc,CAEhB,SACA,YACA,UACA,QACA,YACA,QACA,QACA,YACA,eACA,aACA,YACA,WACA,mBACA,UACA,SACA,aACA,WACA,cACA,QACA,WACA,OACA,SACA,WACA,YACA,UACA,MACA,SACA,MACA,cACA,UACA,gBACA,YACA,mBACA,kBACA,WACA,OACA,WACA,UACA,OACA,OACA,QACA,OACA,SACA,OACA,aACA,YACA,OACA,UACA,UACA,SACA,aACA,UACA,SACA,YACA,SACA,aACA,QACA,YAIEC,EAAc,CAEhB,4BACA,6BACA,8BACA,4BACA,8BACA,4BACA,4BACA,yBACA,6BACA,yBACA,yBACA,+CACA,iBACA,iBACA,gBACA,4BACA,gCACA,iCACA,iCACA,mCACA,iCACA,iCACA,mCACA,iCACA,gCACA,iCACA,qBACA,0BACA,+BACA,8BACA,uBACA,qBACA,sBACA,yBACA,yBACA,oBACA,qBACA,qBACA,qBACA,2BACA,yCACA,0CACA,2CACA,mCACA,oCACA,mCACA,oCACA,wCACA,yCACA,yCACA,yCACA,0CAIEC,EAAiB,CAEnB,oBACA,kBACA,yBACA,kCACA,oBACA,6BACA,qBACA,mBACA,iCACA,iCACA,0BACA,+BACA,oBACA,mBACA,mBACA,6BACA,0BACA,2BACA,0BACA,yBACA,2BACA,0BACA,uBACA,wBACA,0BACA,2BACA,+BACA,qCACA,uCACA,8BAIEC,EAAc,CAEhB,wBACA,qBACA,qBACA,4BACA,eAIEpG,EAAsB,CAAC,MAAO,KAC9BC,EAA6B,CAAC,MAAO,KAAM,OAC3CC,EAA4B,CAAC,KAAM,MAAO,KAC1CC,EAAyB,CAAC,MAAO,KAAM,MAAO,UAAW,MACzDC,EAAsB,CAAC,KAAM,MAAO,MAEpCiG,EAAc,CAEhB,QAAW,CAAC,MACZ,SAAY,CAAC,MACb,mBAAoB,CAAC,MACrB,YAAe,CAAC,MAChB,QAAW,CAAC,MACZ,OAAU,CAAC,MACX,SAAY,CAAC,MACb,KAAQ,CAAC,MACT,SAAY,CAAC,MACb,WAAc,CAAC,MACf,QAAW,CAAC,MACZ,OAAU,CAAC,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","file":"static/js/main.3e2f20ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"DW\", \"ICP\", \"Mo\", \"N\", \"NO3\"];\r\nconst all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM - All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\nconst all_solution_tests = [ \"CBC\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\nconst all_media_tests = [ \"Bulk Density\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n\r\nconst default_plant_tests = [\"ICP\", \"N\"];\r\nconst default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nconst default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nconst default_solution_tests = [\"CBC\", \"Cl\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nconst default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\nconst TestEditForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form id={props.id + \"testEditForm\"} style={{display: \"none\",}} >\r\n        {\r\n\r\n            props.testArray.map( (test) => {\r\n                return(<div key={test}>\r\n                        <input type=\"checkbox\" id={props.id + test} name={test} value={test}\r\n                        defaultChecked={props.assignedTests.includes(test)? true: false}\r\n                        onChange={(event) => props.assignTest(props.id, test, event.target.checked)} />\r\n                        <label htmlFor={props.id + test}>{test}</label>\r\n                       </div>);\r\n            })\r\n        }\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nconst getTestArray = (type) => {\r\n\r\n    if (type === \"Plant\") return all_plant_tests;\r\n    if (type === \"Waste\") return all_waste_tests;\r\n    if (type === \"Solution\") return all_solution_tests;\r\n    if (type === \"Media\") return all_media_tests;\r\n}\r\n\r\nconst isSolidWaste = (code) => {\r\n\r\n    switch (code)\r\n    {\r\n        case \"SSB - Beef Surface Scraped/Stockpiled\":\r\n        case \"SSD - Dairy Surface Scraped/Stockpiled\":\r\n        case \"SSH - Horse Surface Scraped/Stockpiled\":\r\n        case \"SSS - Swine Surface Scraped/Stockpiled\":\r\n        case \"SSO - Other Surface Scraped/Stockpiled\":\r\n        case \"HBB - Broiler breeder litter\":\r\n        case \"HBP - Broiler pullet litter\":\r\n        case \"HLB - Broiler litter\":\r\n        case \"HLL - Layer litter\":\r\n        case \"HLT - Turkey litter\":\r\n        case \"FCB - Composted manure - Beef\":\r\n        case \"FCD - Composted manure - Dairy\":\r\n        case \"FCH - Composted manure - Horse\":\r\n        case \"FCP - Composted manure - Poultry\":\r\n        case \"FCS - Composted manure - Swine\":\r\n        case \"FCO - Composted manure - Other\":\r\n        case \"FPM - Compost, poultry mortality\":\r\n        case \"FSM - Compost, swine mortality\":\r\n        case \"FCW - Compost, plant material\":\r\n        case \"FCX - Compost, mixed materials\":\r\n        case \"FCV - Vermicompost\":\r\n        case \"NCR - Raw plant material/crop residues\":\r\n        case \"NBS - Wood waste/sawdust\":\r\n        case \"NSF - Food/beverage by-products (solid)\":\r\n        case \"NSA - Animal by-products (solid)\":\r\n        case \"IOC - Paper fiber/pulp\":\r\n        case \"IOL - Lime by-products\":\r\n        case \"NSO - Non-composted solid, other\":\r\n        case \"CSW - Wood ash\":\r\n        case \"CSC - Coal ash\":\r\n        case \"CSB - Biochar\":\r\n        case \"CSO - Ash, mixed or other\":\r\n        case \"BCO - Biosolids, composted\":\r\n        case \"BIO - Biosolids, other\":\r\n        case \"BIX - Biosolids, mixed\":\r\n        {\r\n            return true;\r\n        }\r\n\r\n        default: return false;\r\n    }\r\n}\r\n\r\nconst refreshCheckBoxes = (id, testArray, assignedTests) => {\r\n\r\n    for (let test of testArray)\r\n    {\r\n        if (assignedTests.includes(test))\r\n            document.getElementById(id + test).checked = true;\r\n        else\r\n            document.getElementById(id + test).checked = false;\r\n\r\n        // console.log(test + \": \" + (document.getElementById(id + test)).checked);\r\n    }\r\n}\r\n\r\nconst toggleTestEditForm = (id, testArray, assignedTests) =>\r\n{\r\n    refreshCheckBoxes(id, testArray, assignedTests);\r\n\r\n    const formId = id + \"testEditForm\";\r\n\r\n    const form = document.getElementById(formId);\r\n    let val = \"display: block;\";\r\n\r\n    if (form.getAttribute(\"style\") === (\"display: block;\"))\r\n        val = \"display: none;\";\r\n\r\n    document.getElementById(formId).setAttribute(\"style\", val);\r\n}\r\n\r\nconst SampleRow = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.sampleId}</td>\r\n            <td>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\"  value={props.code} onChange={(event) => props.setSampleCode(props.index, event.target.value)} >\r\n                            {props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n            </td>\r\n            <td>{props.tests.filter(item => { \r\n                \r\n                if (props.type === \"Plant\" && default_plant_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && !isSolidWaste(props.code) && default_waste_liquid_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && isSolidWaste(props.code) && default_waste_solid_tests.includes(item)) return false; \r\n                if (props.type === \"Solution\" && default_solution_tests.includes(item)) return false; \r\n                if (props.type === \"Media\" && default_media_tests.includes(item)) return false;\r\n\r\n\r\n                return true;\r\n\r\n            }).join(\" \")}\r\n\r\n\r\n                <button id=\"testEdit\" onClick={() => toggleTestEditForm(props.sampleId, getTestArray(props.type), props.tests)} >\r\n                <img src=\"https://s2.svgbox.net/materialui.svg?ic=edit&color=fff\" alt=\"\"/>\r\n                </button>\r\n                <TestEditForm id={props.sampleId} testArray={getTestArray(props.type)} assignedTests={props.tests} assignTest={props.assignTest}/>\r\n\r\n            </td>\r\n\r\n            <td>\r\n                <input type=\"text\" value={props.comment} onChange={(event) => props.addComment(props.index, event.target.value)} />\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.insertSample(props.index)}>+</button>\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.removeSample(props.index)}>X</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SampleRow;","import React from 'react';\r\nimport SampleRow from './SampleRow';\r\n\r\n\r\n\r\nconst LabHeader = (props) => {\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Report Type: {props.reportData.reportType} </th>\r\n                <th>Report {props.reportData.reportNumber} </th>\r\n                <th>Samples {props.reportData.firstLabId} - {props.reportData.firstLabId + props.reportData.numSamples - 1}</th>\r\n                <th><button id=\"saveButton\" onClick={() => props.saveReport()}>Save Report</button></th>\r\n                <th><button id=\"clearButton\" onClick={() => props.clearGrid()}>Clear Grid</button></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Lab ID</th>\r\n                <th>Crop/Code</th>\r\n                <th>Tests</th>\r\n                <th>Comment</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\n\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.reportData.sampleGrid.map((row, index) => {\r\n        return (\r\n            <SampleRow\r\n            addComment={props.addComment}\r\n            assignTest={props.assignTest}\r\n            code={row.code}\r\n            comment={row.comment}\r\n            dropDown={props.dropDown}\r\n            index={index}\r\n            insertSample={props.insertSample}\r\n            key={index}\r\n            sampleId={row.sampleId}\r\n            removeSample={props.removeSample}\r\n            setSampleCode={props.setSampleCode}\r\n            tests={row.tests}\r\n            type={props.reportData.sampleType}\r\n            />\r\n           \r\n        );\r\n    });\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nconst Table = (props) => {\r\n\r\n    // const {reportData, removeSample} = props;\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table pwsm-table\">\r\n            <LabHeader reportData={props.reportData} clearGrid={props.clearGrid} saveReport={props.saveReport} />\r\n            <TableHeader />\r\n            <TableBody\r\n                addComment={props.addComment}\r\n                assignTest={props.assignTest}\r\n                dropDown={props.dropDown}\r\n                insertSample={props.insertSample}\r\n                removeSample={props.removeSample}\r\n                reportData={props.reportData}\r\n                setSampleCode={props.setSampleCode}\r\n                />\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nconst SavedTable = (props) => {\r\n\r\n    const rows = props.records.map((row, index) => {\r\n\r\n        return(\r\n\r\n        <tr key={index}>\r\n            <td>{row.styledReportNumber}</td>\r\n            <td>{row.sampleType}</td>\r\n            <td>{row.reportType}</td>\r\n            <td>{row.firstLabId} - {row.lastLabId}</td>\r\n        </tr>\r\n\r\n        );\r\n\r\n    });\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table pwsm-table\">\r\n            <thead>\r\n                <tr>\r\n                <th>Report Number</th>\r\n                <th>Sample Type</th>\r\n                <th>Report Type</th>\r\n                <th>Lab IDs</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default SavedTable;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n    initialState = {\r\n\r\n        sampleType: 'Plant',\r\n        reportType: 'Predictive',\r\n        numSamples: 1,\r\n        sampleCode: this.props.dropDown[0],\r\n\r\n    };\r\n\r\n\r\n\r\n    state = this.initialState;\r\n\r\n    handleChange = (event) => {\r\n\r\n        this.setState(state => {\r\n            return { [event.target.name]: event.target.value };\r\n        });\r\n\r\n\r\n    }\r\n\r\n    handleSampleTypeChange = (event) => {\r\n\r\n        this.props.clearGrid();\r\n        this.props.setFormSampleType(event.target.value);\r\n        this.setState(state => {\r\n\r\n            let type = event.target.value;\r\n            let code = \"\";\r\n\r\n            switch(type)\r\n            {\r\n                case \"Plant\":\r\n                    code = this.props.plantMenu[0];\r\n                    break;\r\n                case \"Waste\":\r\n                    code = this.props.wasteMenu[0];\r\n                    break;\r\n                case \"Solution\":\r\n                    code = this.props.solutionMenu[0];\r\n                    break;\r\n                case \"Media\":\r\n                    code = this.props.mediaMenu[0];\r\n                    break;\r\n\r\n                default: break;\r\n            }\r\n\r\n\r\n            return {sampleType: type, sampleCode: code};\r\n        });\r\n\r\n\r\n    }\r\n        \r\n\r\n    \r\n\r\n    selectNumSamples = () => { document.getElementById(\"numSamples\").select(); }\r\n    selectReportNumber = () => { document.getElementById(\"reportNumber\").select(); }\r\n    selectFirstId = () => { document.getElementById(\"firstLabId\").select(); }\r\n\r\n\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n    }\r\n\r\n    render(props) {\r\n\r\n        return (\r\n            <form>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleSampleTypeChange}>\r\n                    <input type=\"radio\" id=\"plant\" name=\"sampleType\" value=\"Plant\" defaultChecked />\r\n                    <label htmlFor=\"plant\">Plant</label>\r\n                    <input type=\"radio\" id=\"waste\" name=\"sampleType\" value=\"Waste\" />\r\n                    <label htmlFor=\"waste\">Waste</label>\r\n                    <input type=\"radio\" id=\"solution\" name=\"sampleType\" value=\"Solution\" />\r\n                    <label htmlFor=\"solution\">Solution</label>\r\n                    <input type=\"radio\" id=\"media\" name=\"sampleType\" value=\"Media\" />\r\n                    <label htmlFor=\"media\">Media</label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleChange}>\r\n                    <input type=\"radio\" id=\"predictive\" name=\"reportType\" value=\"Predictive\" defaultChecked />\r\n                    <label htmlFor=\"predictive\">Predictive</label>\r\n                    <input type=\"radio\" id=\"diagnostic\" name=\"reportType\" value=\"Diagnostic\" />\r\n                    <label htmlFor=\"diagnostic\">Diagnostic</label>\r\n                    <input type=\"radio\" id=\"research\" name=\"reportType\" value=\"Research\" />\r\n                    <label htmlFor=\"research\">Research</label>\r\n                    <input type=\"radio\" id=\"internal\" name=\"reportType\" value=\"Internal\" />\r\n                    <label htmlFor=\"internal\">Internal</label>\r\n                    <input type=\"radio\" id=\"out-of-state\" name=\"reportType\" value=\"Out of State\" />\r\n                    <label htmlFor=\"out-of-state\">Out of State</label>\r\n                </fieldset>\r\n                \r\n                    <div className=\"flex-row\">\r\n                    <table>\r\n                    <thead></thead>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                        <label htmlFor=\"sampleCode\">Crop/Code:</label>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\" onChange={this.handleChange} value={this.state.sampleCode} >\r\n                            {this.props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n                        </td>\r\n\r\n                        <td>\r\n                        <label htmlFor=\"numSamples\">Number of Samples: </label>\r\n                        <input type=\"number\" id=\"numSamples\" name=\"numSamples\" onChange={this.handleChange}\r\n                        onFocus={this.selectNumSamples} value={this.state.numSamples} min=\"1\" max=\"500\" required />\r\n                        </td>\r\n\r\n                    </tr>\r\n                    </tbody>\r\n\r\n                    </table>\r\n                    </div>\r\n\r\n                <input type=\"submit\" value=\"Create Grid\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport Table from './Table';\r\nimport SavedTable from './SavedTable';\r\nimport Form from './Form';\r\n\r\nconst plant_codes = [\r\n\r\n    \"Acacia\",\r\n    \"Ailanthus\",\r\n    \"Alfalfa\",\r\n    \"Apple\",\r\n    \"Asparagus\",\r\n    \"Basil\",\r\n    \"Beans\",\r\n    \"Bentgrass\",\r\n    \"Bermudagrass\",\r\n    \"Blackberry\",\r\n    \"Blueberry\",\r\n    \"Broccoli\",\r\n    \"Brussels sprouts\",\r\n    \"Cabbage\",\r\n    \"Canola\",\r\n    \"Cantaloupe\",\r\n    \"Carinata\",\r\n    \"Cauliflower\",\r\n    \"Cedar\",\r\n    \"Collards\",\r\n    \"Corn\",\r\n    \"Cotton\",\r\n    \"Cucumber\",\r\n    \"Dandelion\",\r\n    \"Dogwood\",\r\n    \"Elm\",\r\n    \"Fescue\",\r\n    \"Fig\",\r\n    \"Fir, Fraser\",\r\n    \"GH Hemp\",\r\n    \"GH Strawberry\",\r\n    \"GH Tomato\",\r\n    \"Grape, Muscadine\",\r\n    \"Grape, Vinifera\",\r\n    \"Honeydew\",\r\n    \"Kale\",\r\n    \"Kohlrabi\",\r\n    \"Lettuce\",\r\n    \"Oats\",\r\n    \"Okra\",\r\n    \"Peach\",\r\n    \"Pear\",\r\n    \"Pepper\",\r\n    \"Pine\",\r\n    \"Poinsettia\",\r\n    \"Raspberry\",\r\n    \"Rice\",\r\n    \"Soybean\",\r\n    \"Spinach\",\r\n    \"Squash\",\r\n    \"Strawberry\",\r\n    \"Tobacco\",\r\n    \"Tomato\",\r\n    \"Turfgrass\",\r\n    \"Turnip\",\r\n    \"Watermelon\",\r\n    \"Wheat\",\r\n    \"Zucchini\"\r\n\r\n];\r\n\r\nconst waste_codes = [\r\n\r\n    \"ALS - Swine Lagoon Liquid\",\r\n    \"ALF - Swine Farrow to Wean\",\r\n    \"ALP - Poultry Lagoon Liquid\",\r\n    \"ALO - Other Lagoon Liquid\",\r\n    \"ASP - Poultry Lagoon Sludge\",\r\n    \"ASS - Swine Lagoon Sludge\",\r\n    \"ASO - Other Lagoon Sludge\",\r\n    \"BID - Domestic septage\",\r\n    \"BCO - Biosolids, composted\",\r\n    \"BIO - Biosolids, other\",\r\n    \"BIX - Biosolids, mixed\",\r\n    \"BLL - Leachates/effluents or reclaimed water\",\r\n    \"CSW - Wood ash\",\r\n    \"CSC - Coal ash\",\r\n    \"CSB - Biochar\",\r\n    \"CSO - Ash, mixed or other\",\r\n    \"FCB - Composted manure - Beef\",\r\n    \"FCD - Composted manure - Dairy\",\r\n    \"FCH - Composted manure - Horse\",\r\n    \"FCP - Composted manure - Poultry\",\r\n    \"FCS - Composted manure - Swine\",\r\n    \"FCO - Composted manure - Other\",\r\n    \"FPM - Compost, poultry mortality\",\r\n    \"FSM - Compost, swine mortality\",\r\n    \"FCW - Compost, plant material\",\r\n    \"FCX - Compost, mixed materials\",\r\n    \"FCV - Vermicompost\",\r\n    \"GTL - Grease trap water\",\r\n    \"HBB - Broiler breeder litter\",\r\n    \"HBP - Broiler pullet litter\",\r\n    \"HLB - Broiler litter\",\r\n    \"HLL - Layer litter\",\r\n    \"HLT - Turkey litter\",\r\n    \"IOC - Paper fiber/pulp\",\r\n    \"IOL - Lime by-products\",\r\n    \"LSB - Beef Slurry\",\r\n    \"LSD - Dairy Slurry\",\r\n    \"LSS - Swine Slurry\",\r\n    \"LSO - Other Slurry\",\r\n    \"NBS - Wood waste/sawdust\",\r\n    \"NCR - Raw plant material/crop residues\",\r\n    \"NSF - Food/beverage by-products (solid)\",\r\n    \"NLF - Food/beverage by-products (liquid)\",\r\n    \"NSA - Animal by-products (solid)\",\r\n    \"NLA - Animal by-products (liquid)\",\r\n    \"NSO - Non-composted solid, other\",\r\n    \"NLO - Non-composted liquid, other\",\r\n    \"SSB - Beef Surface Scraped/Stockpiled\",\r\n    \"SSD - Dairy Surface Scraped/Stockpiled\",\r\n    \"SSH - Horse Surface Scraped/Stockpiled\",\r\n    \"SSS - Swine Surface Scraped/Stockpiled\",\r\n    \"SSO - Other Surface Scraped/Stockpiled\",\r\n\r\n];\r\n\r\nconst solution_codes = [\r\n\r\n    \"AS - Source Water\",\r\n    \"AP - Pond Water\",\r\n    \"AO - Other Aquaculture\",\r\n    \"FP - Fish Production/Recreation\",\r\n    \"QG - Ground Water\",\r\n    \"QH - Household (nonpotable\",\r\n    \"QS - Surface Water\",\r\n    \"QO - Other Water\",\r\n    \"NS - General Nutrient Solution\",\r\n    \"NT - Tobacco Nutrient Solution\",\r\n    \"NL - Pour-thru Leachate\",\r\n    \"NO - Other Nutrient Solution\",\r\n    \"LC - Cattle Water\",\r\n    \"LH - Horse Water\",\r\n    \"LS - Swine Water\",\r\n    \"LO - Other Livestock Water\",\r\n    \"IW - General Irrigation\",\r\n    \"IO - Overhead Irrigation\",\r\n    \"IT - Trickle Irrigation\",\r\n    \"HT - Hydroponic Tomato\",\r\n    \"HC - Hydroponic Cucumber\",\r\n    \"HL - Hydroponic Lettuce\",\r\n    \"HH - Hydroponic Herb\",\r\n    \"HH - Other Hydroponic\",\r\n    \"SP - Pesticide Solution\",\r\n    \"SH - Hydroponic Nutrient\",\r\n    \"SF - Floriculture Production\",\r\n    \"ST - Tobacco Transplant Production\",\r\n    \"SV - Vegetable Transplant Production\",\r\n    \"SO - Other Solution Source\"\r\n\r\n];\r\n\r\nconst media_codes = [\r\n\r\n    \"GHF - GH Floriculture\",\r\n    \"GHV - GH Vegetable\",\r\n    \"NUR - Nursery Crop\",\r\n    \"TOB - Tobacco Transplants\",\r\n    \"OTH - Other\"\r\n\r\n];\r\n\r\nconst default_plant_tests = [\"ICP\", \"N\"];\r\nconst default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nconst default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nconst default_solution_tests = [\"CBC\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nconst default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\nconst extra_tests = {\r\n\r\n    \"Alfalfa\": [\"Mo\"],\r\n    \"Broccoli\": [\"Mo\"],\r\n    \"Brussels sprouts\": [\"Mo\"],\r\n    \"Cauliflower\": [\"Mo\"],\r\n    \"Cabbage\": [\"Mo\"],\r\n    \"Canola\": [\"Mo\"],\r\n    \"Collards\": [\"Mo\"],\r\n    \"Kale\": [\"Mo\"],\r\n    \"Kohlrabi\": [\"Mo\"],\r\n    \"Poinsettia\": [\"Mo\"],\r\n    \"Spinach\": [\"Mo\"],\r\n    \"Turnip\": [\"Mo\"],\r\n\r\n    \"Strawberry\": [\"NO3\"],\r\n    \"Cotton\": [\"NO3\"],\r\n\r\n    \"BID - Domestic septage\": [\"pH\", \"EC\"],\r\n    \"BCO - Biosolids, composted\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIO - Biosolids, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIX - Biosolids, mixed\": [\"C\", \"pH\", \"EC\"],\r\n    \"BLL - Leachates/effluents or reclaimed water\": [\"pH\", \"EC\"],\r\n\r\n    \"CSW - Wood ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSC - Coal ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSB - Biochar\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSO - Ash, mixed or other\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"FCB - Composted manure - Beef\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCD - Composted manure - Dairy\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCH - Composted manure - Horse\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCP - Composted manure - Poultry\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCS - Composted manure - Swine\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCO - Composted manure - Other\": [\"C\", \"pH\", \"EC\"],\r\n    \"FPM - Compost, poultry mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FSM - Compost, swine mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCW - Compost, plant material\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCX - Compost, mixed materials\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCV - Vermicompost\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"GTL - Grease trap water\": [\"pH\", \"EC\"],\r\n\r\n    \"IOC - Paper fiber/pulp\": [\"C\", \"pH\", \"EC\"],\r\n    \"IOL - Lime by-products\": [\"CCE\", \"pH\", \"EC\"],\r\n\r\n    \"NBS - Wood waste/sawdust\": [\"C\", \"pH\", \"EC\"],\r\n    \"NCR - Raw plant material/crop residues\": [\"C\", \"pH\", \"EC\"],\r\n    \"NSF - Food/beverage by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLF - Food/beverage by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSA - Animal by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLA - Animal by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSO - Non-composted solid, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLO - Non-composted liquid, other\": [\"pH\", \"EC\"]\r\n\r\n\r\n};\r\n\r\nconst saved_reports = [];\r\nconst saved_report_ids = [];\r\n\r\nconst saved_plant_report_numbers = [];\r\nconst saved_waste_report_numbers = [];\r\nconst saved_solution_report_numbers = [];\r\nconst saved_media_report_numbers = [];\r\n\r\nconst saved_plant_lab_ids = [];\r\nconst saved_waste_lab_ids = [];\r\nconst saved_solution_lab_ids = [];\r\nconst saved_media_lab_ids = [];\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        console.log(\"Hello.\");\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    initialState = {\r\n\r\n        createDisplay: true,\r\n        savedDisplay: false,\r\n\r\n        sampleType: \"Plant\",\r\n        formSampleType: \"Plant\",\r\n        formSampleCode: plant_codes[0],\r\n        reportType: \"Predictive\",\r\n        reportNumber: 101,\r\n        firstLabId: 1001,\r\n        numSamples: 1,\r\n        sampleCode: '',\r\n        sampleGrid: []\r\n    };\r\n\r\n\r\n    state = this.initialState;\r\n\r\n\r\n\r\n    addComment = (key, newComment) => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].comment = newComment; \r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n    }\r\n\r\n    assignTest = (id, test, val) => {\r\n\r\n        console.log(\"assignTest() function: \" + id + \" \" + test + \" \" + val);\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            samples = samples.map( row => {\r\n\r\n                if (row.sampleId === id)\r\n                {\r\n                    if (val === true && !row.tests.includes(test))\r\n                    {\r\n                        console.log(\"Adding \" + test + \" to sample \" + id);\r\n                        row.tests.push(test);\r\n                        row.tests.sort();\r\n\r\n\r\n                    }\r\n\r\n                    else if (val === false && row.tests.includes(test))\r\n                    {\r\n                        console.log(\"Removing \" + test + \" from sample \" + id);\r\n                        row.tests = row.tests.filter(item => item !== test);\r\n\r\n                    }\r\n                }\r\n\r\n                return row;\r\n            })\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n    }\r\n\r\n\r\n    adjustGridIdNumbers = () => {\r\n\r\n        this.refreshSampleIDs();\r\n        this.setState(state => {\r\n\r\n            let first = state.firstLabId;\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let i = 0; i < state.numSamples; ++i)\r\n            {\r\n                samples[i].sampleId = first + i;\r\n            }\r\n\r\n            return { sampleGrid: samples };\r\n        })\r\n\r\n    }\r\n\r\n    clearGrid = () => {\r\n\r\n        console.log(\"Clearing grid\");\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let sample of samples)\r\n            {\r\n                while (sample.tests.length > 0)\r\n                    sample.tests.shift();\r\n\r\n            }\r\n\r\n            while (samples.length > 0)\r\n                samples.shift();\r\n\r\n            return {sampleGrid: samples, numSamples: 1}\r\n\r\n        });\r\n    }\r\n\r\n    deleteSavedReport = (reportNumber) =>\r\n    {\r\n\r\n    }\r\n\r\n    displayCreate = () => {\r\n\r\n\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                createDisplay: true,\r\n                savedDisplay: false\r\n            }\r\n        })\r\n    }\r\n\r\n    displayReports = () => {\r\n\r\n        if (saved_reports.length < 1)\r\n        {\r\n            window.alert(\"No reports have been created.\");\r\n            return;\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                createDisplay: false,\r\n                savedDisplay: true\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    getDropDown = (type) => {\r\n\r\n        switch (type)\r\n        {\r\n            case \"Plant\": return plant_codes;\r\n            case \"Waste\": return waste_codes;\r\n            case \"Solution\": return solution_codes;\r\n            case \"Media\": return media_codes;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    getNextNumbers = (type) => {\r\n\r\n        let report_numbers = saved_plant_report_numbers;\r\n        let lab_numbers = saved_plant_lab_ids;\r\n        let nextReportNumber = 1;\r\n        let nextLabNumber = 1;\r\n\r\n        switch (type)\r\n        {\r\n            case \"Waste\":\r\n                report_numbers = saved_waste_report_numbers;\r\n                lab_numbers = saved_waste_lab_ids;\r\n                break;\r\n\r\n            case \"Solution\":\r\n                report_numbers = saved_solution_report_numbers;\r\n                lab_numbers = saved_solution_lab_ids;\r\n                break;\r\n\r\n            case \"Media\":\r\n                report_numbers = saved_media_report_numbers;\r\n                lab_numbers = saved_media_lab_ids;\r\n                break;\r\n\r\n            default: break;\r\n        }\r\n\r\n        if (report_numbers.length < 1)\r\n            nextReportNumber = 101;\r\n        else\r\n            nextReportNumber = report_numbers[report_numbers.length - 1] + 1;\r\n\r\n        if (lab_numbers.length < 1)\r\n            nextLabNumber = 1001;\r\n        else\r\n            nextLabNumber = lab_numbers[lab_numbers.length - 1] + 1;\r\n\r\n        return [nextReportNumber, nextLabNumber];\r\n    }\r\n\r\n    getStyledReportNumber = (type, number) => {\r\n\r\n        let styledNumber = \"R\";\r\n\r\n        switch(type)\r\n        {\r\n            case \"Plant\": styledNumber += \"P\"; break;\r\n            case \"Waste\": styledNumber += \"W\"; break;\r\n            case \"Solution\": styledNumber += \"S\"; break;\r\n            case \"Media\": styledNumber += \"M\"; break;\r\n            default: break;\r\n        }\r\n\r\n        if (number < 10) styledNumber += \"00000\";\r\n        else if (number < 100) styledNumber += \"0000\";\r\n        else if (number < 1000) styledNumber += \"000\";\r\n        else if (number < 1000) styledNumber += \"00\";\r\n        else if (number < 10000) styledNumber += \"0\";\r\n\r\n        styledNumber += number;\r\n\r\n        return styledNumber;\r\n    }\r\n\r\n    insertSample = (index) => {\r\n\r\n        let samples = this.state.sampleGrid;\r\n        let copy = Object.create(samples[index]);\r\n        copy = Object.assign(copy, samples[index]);\r\n\r\n        copy.tests = copyArray(samples[index].tests);\r\n\r\n        samples.splice(index, 0, copy);\r\n\r\n        this.setState(state => {\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    refreshSampleIDs = () => {\r\n\r\n        this.setState(state => {\r\n            let newNumSamples = state.sampleGrid.length;\r\n            return { numSamples: newNumSamples };\r\n        });\r\n    }\r\n\r\n    removeSample = (index) => {\r\n\r\n        this.setState(state => {\r\n            const samples = state.sampleGrid.filter((row, i) => i !== index);\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    handleSubmit = (reportInfo) => {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                sampleType: reportInfo.sampleType,\r\n                reportType: reportInfo.reportType,\r\n                numSamples: Number.parseInt(reportInfo.numSamples),\r\n                sampleCode: reportInfo.sampleCode\r\n            };\r\n\r\n        });\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = [];\r\n\r\n            for (let i = 0; i < reportInfo.numSamples; ++i)\r\n            {\r\n                samples.push({\r\n                    sampleId: Number.parseInt(this.state.firstLabId) + i,\r\n                    code: reportInfo.sampleCode,\r\n                    tests: getTests(reportInfo.sampleType, reportInfo.sampleCode),\r\n                    comment: \"\"});\r\n            }\r\n\r\n\r\n            return {sampleGrid: samples};\r\n\r\n        });\r\n    \r\n    }\r\n\r\n    saveReport = () => {\r\n\r\n        if (this.state.sampleGrid.length < 1)\r\n        {\r\n            window.alert(\"Nothing to save!\");\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n            let newId = this.getStyledReportNumber(this.state.sampleType, this.state.reportNumber);\r\n\r\n            let newReport = {\r\n\r\n                reportNumber: this.state.reportNumber,\r\n                styledReportNumber: newId,\r\n                sampleType: this.state.sampleType,\r\n                reportType: this.state.reportType,\r\n                sampleGrid: this.state.sampleGrid,\r\n                firstLabId: this.state.firstLabId,\r\n                lastLabId: this.state.firstLabId + this.state.sampleGrid.length - 1\r\n\r\n            };\r\n\r\n            if (saved_report_ids.includes(newId))\r\n            {\r\n                window.alert(\"Report \" + newId + \" has already been used.\" );\r\n            }\r\n\r\n            else\r\n            {\r\n                window.alert(\"Saving report \" + newId);\r\n                saved_reports.push(newReport);\r\n                saved_report_ids.push(newId);\r\n                this.clearGrid();\r\n                \r\n                if (newReport.sampleType === \"Plant\")\r\n                {\r\n                    saved_plant_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_plant_lab_ids.push(i);\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Waste\")\r\n                {\r\n                    saved_waste_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_waste_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Solution\")\r\n                    {\r\n                    saved_solution_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_solution_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Media\")\r\n                    {\r\n                    saved_media_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_media_lab_ids.push(i);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    setSampleCode = (key, newCode) => {\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].code = newCode;\r\n            samples[key].tests = getTests(state.sampleType, newCode);\r\n            return { sampleGrid: samples };\r\n        });\r\n    };\r\n\r\n    setFormSampleType = (type) => {\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                formSampleType: type,\r\n                formSampleCode: this.getDropDown(type)[0],\r\n            }\r\n\r\n        });\r\n\r\n        console.log(type);\r\n        console.log(this.state.formSampleType);\r\n        console.log(this.getNextNumbers(type)[0]);\r\n        console.log(this.getNextNumbers(type)[1]);\r\n\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                reportNumber: this.getNextNumbers(type)[0],\r\n                firstLabId: this.getNextNumbers(type)[1]\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        // console.clear();\r\n\r\n        \r\n\r\n        if (this.state.createDisplay)\r\n        {\r\n            return (\r\n            <div className=\"container\">\r\n                <button id=\"displaySavedButton\" onClick={() => this.displayReports()}>Show Saved Reports</button>\r\n                <Form\r\n                    clearGrid={this.clearGrid}\r\n                    plantMenu={plant_codes}\r\n                    wasteMenu={waste_codes}\r\n                    solutionMenu={solution_codes}\r\n                    mediaMenu={media_codes}\r\n                    dropDown={this.getDropDown(this.state.formSampleType)}\r\n                    handleSubmit={this.handleSubmit}\r\n                    sampleCode={this.state.formSampleCode}\r\n                    setFormSampleType={this.setFormSampleType}\r\n                    />\r\n\r\n                <div className=\"container\">\r\n                <Table\r\n                    addComment={this.addComment}\r\n                    assignTest={this.assignTest}\r\n                    clearGrid={this.clearGrid}\r\n                    dropDown={this.getDropDown(this.state.sampleType)}\r\n                    insertSample={this.insertSample}\r\n                    removeSample={this.removeSample}\r\n                    reportData={this.state}\r\n                    saveReport={this.saveReport}\r\n                    setSampleCode={this.setSampleCode}\r\n                    />\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n\r\n        else if (this.state.savedDisplay)\r\n        {\r\n            return (\r\n                <div className=\"container\">\r\n                    <button id=\"displayCreateScreen\" onClick={() => this.displayCreate()}>Create New Report</button>\r\n                    <SavedTable\r\n                        records={saved_reports}\r\n\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction copyArray(arr)\r\n{\r\n    let result = [];\r\n\r\n    for (let item of arr)\r\n        result.push(item);\r\n\r\n    return result;\r\n}\r\n\r\n\r\n\r\nfunction isSolidWaste(code)\r\n{\r\n    switch (code)\r\n    {\r\n        case \"SSB - Beef Surface Scraped/Stockpiled\":\r\n        case \"SSD - Dairy Surface Scraped/Stockpiled\":\r\n        case \"SSH - Horse Surface Scraped/Stockpiled\":\r\n        case \"SSS - Swine Surface Scraped/Stockpiled\":\r\n        case \"SSO - Other Surface Scraped/Stockpiled\":\r\n        case \"HBB - Broiler breeder litter\":\r\n        case \"HBP - Broiler pullet litter\":\r\n        case \"HLB - Broiler litter\":\r\n        case \"HLL - Layer litter\":\r\n        case \"HLT - Turkey litter\":\r\n        case \"FCB - Composted manure - Beef\":\r\n        case \"FCD - Composted manure - Dairy\":\r\n        case \"FCH - Composted manure - Horse\":\r\n        case \"FCP - Composted manure - Poultry\":\r\n        case \"FCS - Composted manure - Swine\":\r\n        case \"FCO - Composted manure - Other\":\r\n        case \"FPM - Compost, poultry mortality\":\r\n        case \"FSM - Compost, swine mortality\":\r\n        case \"FCW - Compost, plant material\":\r\n        case \"FCX - Compost, mixed materials\":\r\n        case \"FCV - Vermicompost\":\r\n        case \"NCR - Raw plant material/crop residues\":\r\n        case \"NBS - Wood waste/sawdust\":\r\n        case \"NSF - Food/beverage by-products (solid)\":\r\n        case \"NSA - Animal by-products (solid)\":\r\n        case \"IOC - Paper fiber/pulp\":\r\n        case \"IOL - Lime by-products\":\r\n        case \"NSO - Non-composted solid, other\":\r\n        case \"CSW - Wood ash\":\r\n        case \"CSC - Coal ash\":\r\n        case \"CSB - Biochar\":\r\n        case \"CSO - Ash, mixed or other\":\r\n        case \"BCO - Biosolids, composted\":\r\n        case \"BIO - Biosolids, other\":\r\n        case \"BIX - Biosolids, mixed\":\r\n        {\r\n            return true;\r\n        }\r\n\r\n        default: return false;\r\n    }\r\n}\r\n\r\nfunction getTests(type, code)\r\n{\r\n    let result_array = [];\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\":\r\n            result_array = default_plant_tests;\r\n            break;\r\n        case \"Solution\":\r\n            result_array = default_solution_tests;\r\n            break;\r\n        case \"Media\":\r\n            result_array = default_media_tests;\r\n            break;\r\n        case \"Waste\":\r\n            if (isSolidWaste(code))\r\n                result_array = default_waste_solid_tests;\r\n            else\r\n                result_array = default_waste_liquid_tests;\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n    if (extra_tests.hasOwnProperty(code))\r\n        result_array = result_array.concat(extra_tests[code]);\r\n\r\n\r\n    let result_copy = [];\r\n    for (let item of result_array)\r\n        result_copy.push(item);\r\n\r\n    return result_copy;\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './pwsm.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}